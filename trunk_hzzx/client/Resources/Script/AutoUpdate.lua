------------------------------------------------------------------------ Author: jaron.ho-- Date: 2015-02-02-- Brief: 自动更新----------------------------------------------------------------------local mWinSize = cc.Director:getInstance():getWinSize()local mListenHandler = nil			-- 监听句柄local mRecordHandler = nil			-- 记录句柄local mUpdateEndCallback = nil		-- 结束回调local DIVISOR_SIZE_K = 1024			-- 除数大小(K)local DIVISOR_SIZE_M = 1024 * 1024	-- 除数大小(M)local SIZE_BOUND = 0.1				-- 大小界限(M)local mNeedUpdateCount = 0			-- 需要更新的文件数量local mNeedUpdateSize = 0			-- 需要更新的大小(字节)local mHasUpdateCount = 0			-- 已经更新的文件数量local mHasUpdateSize = 0			-- 已经更新的大小(字节)local mCurrUpdateCount = 0			-- 当前更新的文件数量local mCurrUpdateSize = 0			-- 当前更新的大小(字节)-- 界面控件local mRootNode = nil				-- 界面根节点local mCheckImage = nil				-- 检查图片local mLoadingImage = nil			-- 进度图片local mLoadingBar = nil				-- 进度条local mLoadingBarBg = nil			-- 进度条背景local mLoadingText = nil			-- 进度文本local mTipFrame = nil				-- 提示框local mTipText = nil				-- 提示文本local mTipSureBtn = nil				-- 提示确认按钮local mTipCancelBtn = nil			-- 提示取消按钮local mTipSureImg = nil				-- 提示确认文字图片local mTipCancelImg = nil			-- 提示取消文字图片local mTipLeftImg = nil				-- 提示左边猫纹local mTipRightImg = nil			-- 提示右边猫纹local mTipLine_1 = nil				-- 提示直线一local mTipLine_2 = nil				-- 提示直线二local mTipLine_3 = nil				-- 提示直线三local mTipLine_4 = nil				-- 提示直线四local mTipLine_5 = nil				-- 提示直线五-- 提示文本local TEXT_CONFIG = {	["CH"] = {		-- 中文		[1] = "上次更新未结束，必须继续更新，请重新检测版本",		[2] = "上次更新未结束，必须继续更新，请重新检测更新列表",		[3] = "上次更新未结束，必须继续更新，此次需要更新%s数据",		[4] = "发现新版本，更新到该版本需要下载%s数据",		[5] = "更新出错：\n",		[6] = "请检查网络连接并重试",	},	["EN"] = {		-- 英文		[1] = "上次更新未结束，必须继续更新，请重新检测版本",		[2] = "上次更新未结束，必须继续更新，请重新检测更新列表",		[3] = "上次更新未结束，必须继续更新，此次需要更新%s数据",		[4] = "发现新版本，更新到该版本需要下载%s数据",		[5] = "更新出错：\n",		[6] = "请检查网络连接并重试",	},}local mTextConfig = TEXT_CONFIG["CH"]------------------------------------------------------------------------ 错误解析function AutoUpdate_parseError(errorBuffer)	local infos = require("json").decode(errorBuffer)	local errorContent = infos["url"]	errorContent = errorContent..","..infos["curl_code"]	errorContent = errorContent..","..infos["response_code"]	errorContent = errorContent..","..infos["error"]	return errorContentend------------------------------------------------------------------------ 版本检测失败function AutoUpdate_onCheckVersionFailed(errorBuffer)	cclog("auto update on check version failed: "..errorBuffer)	if cc.UserDefault:getInstance():getBoolForKey("auto_update_unfinished") then		-- 上次更新未完成,继续更新		AutoUpdate_showTip(true, 3, mTextConfig[1])	else		-- 直接进入游戏		AutoUpdate_end()	endend------------------------------------------------------------------------ 发现新版本function AutoUpdate_onNewVersion(curVersion, newVersion)	cclog("auto update on new version, curVersion: "..curVersion..", newVersion: "..newVersion)	-- 检查更新内容	ResUpdate.checkUpdate()end------------------------------------------------------------------------ 没有新版本function AutoUpdate_onNoNewVersion(curVersion)	cclog("auto update no new version, curVersion:  "..curVersion)	-- 直接进入游戏	AutoUpdate_end()end------------------------------------------------------------------------ 更新列表检测失败function AutoUpdate_onCheckUpdateListFailed(errorBuffer)	cclog("auto update on check update list failed: "..errorBuffer)	if cc.UserDefault:getInstance():getBoolForKey("auto_update_unfinished") then		-- 上次更新未完成,继续更新		AutoUpdate_showTip(true, 4, mTextConfig[2])	else		-- 直接进入游戏		AutoUpdate_end()	endend------------------------------------------------------------------------ 发现更新列表function AutoUpdate_onUpdateList(updateCount, updateSize)	cclog("auto update on update list, count: "..tostring(updateCount)..", size: "..tostring(updateSize))	mNeedUpdateCount = mHasUpdateCount + updateCount	mNeedUpdateSize = mHasUpdateSize + updateSize	mCurrUpdateCount = 0	mCurrUpdateSize = 0	local sizeStr = ""	local sizeK, sizeM = updateSize/DIVISOR_SIZE_K, updateSize/DIVISOR_SIZE_M	if sizeM >= SIZE_BOUND then		sizeStr = string.format("%0.2fM", sizeM)	else		sizeStr = string.format("%0.2fK", sizeK)	end	if cc.UserDefault:getInstance():getBoolForKey("auto_update_unfinished") then		-- 上次更新未完成,继续更新		AutoUpdate_showTip(true, 5, string.format(mTextConfig[3], sizeStr))	else		-- 提示用户是否下载		AutoUpdate_showTip(true, 1, string.format(mTextConfig[4], sizeStr))	endend------------------------------------------------------------------------ 没有更新列表function AutoUpdate_onNoUpdateList()	cclog("auto update on no update list")	AutoUpdate_end()end------------------------------------------------------------------------ 单个文件下载进度function AutoUpdate_onPogress(fileURL, totalSize, currSize)	-- cclog("auto update on progress, fileURL"..fileURL..", totalSize: "..tostring(totalSize)..", currSize: "..tostring(currSize))	mCurrUpdateSize = currSize	AutoUpdate_showProgress(true, mHasUpdateSize + currSize, mNeedUpdateSize)end------------------------------------------------------------------------ 单个文件下载完成function AutoUpdate_onSuccess(fileURL)	-- cclog("auto update on success, fileURL: "..fileURL)	mCurrUpdateCount = mCurrUpdateCount + 1	mHasUpdateCount = mHasUpdateCount + 1	mHasUpdateSize = mHasUpdateSize + mCurrUpdateSizeend------------------------------------------------------------------------ 文件列表下载进度function AutoUpdate_onTotalProgress(fileURL, totalCount, curCount)	-- cclog("auto update on total progress, fileURL: "..fileURL..", totalCount: "..tostring(totalCount)..", curCount: "..tostring(curCount))end------------------------------------------------------------------------ 所有文件下载完成function AutoUpdate_onTotalSuccess()	cclog("auto update on total success")	cc.UserDefault:getInstance():setBoolForKey("auto_update_unfinished", false)	AutoUpdate_end()end------------------------------------------------------------------------ 文件下载出错function AutoUpdate_onError(fileURL, errorBuffer)	cclog("auto update on error, fileURL: "..fileURL..", errorBuffer: "..errorBuffer)	ResUpdate.record()	cc.UserDefault:getInstance():setBoolForKey("auto_update_unfinished", true)	local tipContent = mTextConfig[5]	if G.CONFIG["debug"] then		tipContent = tipContent..AutoUpdate_parseError(errorBuffer).."\n"	end	tipContent = tipContent..mTextConfig[6]	AutoUpdate_showTip(true, 2, tipContent)end------------------------------------------------------------------------ 每帧更新function AutoUpdate_onListen(dt)	ResUpdate.listen()end------------------------------------------------------------------------ 每指定帧间隔更新function AutoUpdate_onRecord(dt)	ResUpdate.record()end------------------------------------------------------------------------ 执行更新function AutoUpdate_excute()	cclog("auto update excute ...")	local listenerTable = 	{		"AutoUpdate_onCheckVersionFailed",		"AutoUpdate_onNewVersion",		"AutoUpdate_onNoNewVersion",		"AutoUpdate_onCheckUpdateListFailed",		"AutoUpdate_onUpdateList",		"AutoUpdate_onNoUpdateList",		"AutoUpdate_onPogress",		"AutoUpdate_onSuccess",		"AutoUpdate_onTotalProgress",		"AutoUpdate_onTotalSuccess",		"AutoUpdate_onError"	}	for key, value in pairs(listenerTable) do		ResUpdate.addListener(key, value)	end	ResUpdate.setTimeout(5, 30)	ResUpdate.checkVersion(G.CONFIG["update_url"], "CheckVersion.txt", "CheckFileList.txt")end------------------------------------------------------------------------ 开始更新function AutoUpdate_start(doUpdate, callback)	if not doUpdate then		if "function" == type(callback) then			callback()		end		return	end	cclog("auto update start ...")	mUpdateEndCallback = callback	mListenHandler = cc.Director:getInstance():getScheduler():scheduleScriptFunc(AutoUpdate_onListen, 0, false)	mRecordHandler = cc.Director:getInstance():getScheduler():scheduleScriptFunc(AutoUpdate_onRecord, 15, false)	mRootNode = cc.Node:create()	cc.Director:getInstance():getRunningScene():addChild(mRootNode)	AutoUpdate_showBackground()	AutoUpdate_showProgress(false)	AutoUpdate_showTip(false)	AutoUpdate_excute()	ChannelProxy:recordCustom("stat_game_logo_update")end------------------------------------------------------------------------ 更新结束function AutoUpdate_end()	cclog("auto update end ...")	cc.Director:getInstance():getScheduler():unscheduleScriptEntry(mListenHandler)	cc.Director:getInstance():getScheduler():unscheduleScriptEntry(mRecordHandler)	mRootNode:removeFromParent()	mRootNode = NULL	if "function" == type(mUpdateEndCallback) then		mUpdateEndCallback()		mUpdateEndCallback = nil	endend------------------------------------------------------------------------ 显示背景function AutoUpdate_showBackground()	local background = ccui.ImageView:create("background_01.jpg")	background:setAnchorPoint(cc.p(0.5, 0.5))	background:setPosition(cc.p(mWinSize.width/2, mWinSize.height/2))	mRootNode:addChild(background)end------------------------------------------------------------------------ 显示进度function AutoUpdate_showProgress(show, curr, total)	-- 计算	curr, total = curr or 0, total or 1		local percent = (curr/total)*100	local currSizeStr, totalSizeStr = "", ""	local currSizeK, currSizeM = curr/DIVISOR_SIZE_K, curr/DIVISOR_SIZE_M	local totalSizeK, totalSizeM = total/DIVISOR_SIZE_K, total/DIVISOR_SIZE_M	if totalSizeM >= SIZE_BOUND then		currSizeStr = string.format("%0.2fM", currSizeM)		totalSizeStr = string.format("%0.2fM", totalSizeM)	else		currSizeStr = string.format("%0.2fK", currSizeK)		totalSizeStr = string.format("%0.2fK", totalSizeK)	end	-- 检查	if nil == mCheckImage then		mCheckImage = ccui.ImageView:create("text_check.png")		mCheckImage:setPosition(cc.p(mWinSize.width/2, 114))		mRootNode:addChild(mCheckImage)	end	mCheckImage:setVisible(not show)	-- 图片	if nil == mLoadingImage then		mLoadingImage = ccui.ImageView:create("au_image_01.png")		mLoadingImage:setPosition(cc.p(mWinSize.width/2, 154))		mRootNode:addChild(mLoadingImage)	end	mLoadingImage:setVisible(show)	-- 进度条背景	if nil == mLoadingBarBg then		mLoadingBarBg = ccui.ImageView:create("au_progress_bg.png")		mLoadingBarBg:setPosition(cc.p(mWinSize.width/2, 114))		mRootNode:addChild(mLoadingBarBg)	end	mLoadingBarBg:setVisible(show)	-- 进度条	if nil == mLoadingBar then		mLoadingBar = ccui.LoadingBar:create("au_progress_bar.png", 0)		mLoadingBar:setPosition(cc.p(mWinSize.width/2, 114))		mRootNode:addChild(mLoadingBar)	end	mLoadingBar:setPercent(percent)	mLoadingBar:setVisible(show)	-- 进度文本	if nil == mLoadingText then		mLoadingText = ccui.Text:create("0M/0M", "Arial", 20)		mLoadingText:setPosition(cc.p(mWinSize.width/2, 114))		mRootNode:addChild(mLoadingText)	end	mLoadingText:setString(currSizeStr.."/"..totalSizeStr)	mLoadingText:setVisible(show)end------------------------------------------------------------------------ 显示提示框function AutoUpdate_showTip(show, tipType, tipContent)	local TIP_SIZE = cc.size(419, 230)	-- 提示框	if nil == mTipFrame then		mTipFrame = ccui.Layout:create()		mTipFrame:setAnchorPoint(cc.p(0.5, 0.5))		mTipFrame:setBackGroundImageScale9Enabled(true)		mTipFrame:setBackGroundImage("public_cat_boarder.png")		mTipFrame:setBackGroundImageCapInsets(cc.rect(40, 50, 40, 50))		mTipFrame:setContentSize(TIP_SIZE)		mTipFrame:setPosition(cc.p(mWinSize.width/2, mWinSize.height/2))		mRootNode:addChild(mTipFrame)	end	mTipFrame:setVisible(show)	-- 提示左边猫纹	if nil == mTipLeftImg then		mTipLeftImg = ccui.ImageView:create("public_cat_tatoo.png")		mTipLeftImg:setAnchorPoint(cc.p(0.5, 0.5))		mTipLeftImg:setPosition(cc.p(14.87, TIP_SIZE.height/2))		mTipFrame:addChild(mTipLeftImg)	end	-- 提示右边猫纹	if nil == mTipRightImg then		mTipRightImg = ccui.ImageView:create("public_cat_tatoo.png")		mTipRightImg:setAnchorPoint(cc.p(0.5, 0.5))		mTipRightImg:setPosition(cc.p(403.75, TIP_SIZE.height/2))		mTipFrame:addChild(mTipRightImg)	end	local LiNE_POS = cc.size(210, 180)	-- 提示直线一	if nil == mTipLine_1 then		mTipLine_1 = ccui.ImageView:create("public_line.png")		mTipLine_1:setAnchorPoint(cc.p(0.5, 0.5))		mTipLine_1:setScale9Enabled(true)		mTipLine_1:setCapInsets(cc.rect(0, 0, 0, 0))		mTipLine_1:setContentSize(cc.size(338,8))		mTipLine_1:setPosition(cc.p(LiNE_POS.width, LiNE_POS.height))		mTipFrame:addChild(mTipLine_1)	end	-- 提示直线二	if nil == mTipLine_2 then		mTipLine_2 = ccui.ImageView:create("public_line.png")		mTipLine_2:setAnchorPoint(cc.p(0.5, 0.5))		mTipLine_2:setScale9Enabled(true)		mTipLine_2:setCapInsets(cc.rect(0, 0, 0, 0))		mTipLine_2:setContentSize(cc.size(338,8))		mTipLine_2:setPosition(cc.p(LiNE_POS.width, LiNE_POS.height - 30))		mTipFrame:addChild(mTipLine_2)	end	-- 提示直线三	if nil == mTipLine_3 then		mTipLine_3 = ccui.ImageView:create("public_line.png")		mTipLine_3:setAnchorPoint(cc.p(0.5, 0.5))		mTipLine_3:setScale9Enabled(true)		mTipLine_3:setCapInsets(cc.rect(0, 0, 0, 0))		mTipLine_3:setContentSize(cc.size(338,8))		mTipLine_3:setPosition(cc.p(LiNE_POS.width, LiNE_POS.height - 30*2))		mTipFrame:addChild(mTipLine_3)	end	-- 提示直线四	if nil == mTipLine_4 then		mTipLine_4 = ccui.ImageView:create("public_line.png")		mTipLine_4:setAnchorPoint(cc.p(0.5, 0.5))		mTipLine_4:setScale9Enabled(true)		mTipLine_4:setCapInsets(cc.rect(0, 0, 0, 0))		mTipLine_4:setContentSize(cc.size(338,8))		mTipLine_4:setPosition(cc.p(LiNE_POS.width, LiNE_POS.height  - 30*3))		mTipFrame:addChild(mTipLine_4)	end	-- 提示直线五	if nil == mTipLine_5 then		mTipLine_5 = ccui.ImageView:create("public_line.png")		mTipLine_5:setAnchorPoint(cc.p(0.5, 0.5))		mTipLine_5:setScale9Enabled(true)		mTipLine_5:setCapInsets(cc.rect(0, 0, 0, 0))		mTipLine_5:setContentSize(cc.size(338,8))		mTipLine_5:setPosition(cc.p(LiNE_POS.width, LiNE_POS.height - 30*4))		mTipFrame:addChild(mTipLine_5)	end	-- 提示文本	if nil == mTipText then		mTipText = ccui.Text:create("", "Arial", 24)		mTipText:setAnchorPoint(cc.p(0.5, 1))		mTipText:setColor(cc.c3b(87,34,6))		mTipText:setPosition(cc.p(TIP_SIZE.width/2, TIP_SIZE.height - 48))		mTipText:ignoreContentAdaptWithSize(false)		mTipText:setTextAreaSize(cc.size(338, 80))		-- mTipText:setTextHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER)		mTipText:setTextVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_TOP)		mTipFrame:addChild(mTipText, 10)	end	if "string" ~= type(tipContent) then		tipContent = ""	end	mTipText:setString(tipContent)	-- 提示取消按钮	if nil == mTipCancelBtn then		mTipCancelBtn = ccui.Button:create()		mTipCancelBtn:loadTextures("public_red_btn.png", "public_red_btn.png", "")		--mTipCancelBtn:setScaleX(0.58)		--mTipCancelBtn:setScaleY(0.73)		mTipCancelBtn:setAnchorPoint(cc.p(0.5, 0.5))		mTipFrame:addChild(mTipCancelBtn)			end	mTipCancelBtn:addTouchEventListener(function(sender, eventType)		if ccui.TouchEventType.ended == eventType then			AutoUpdate_showTip(false)			if "function" == type(mUpdateEndCallback) then				mUpdateEndCallback()			end		end	end)	-- 提示取消文字图片	if nil == mTipCancelImg then		mTipCancelImg = ccui.ImageView:create("text_cancle_update.png")		mTipCancelImg:setAnchorPoint(cc.p(0.5, 0.5))		mTipCancelBtn:addChild(mTipCancelImg)	end	-- 提示确认按钮	if nil == mTipSureBtn then		mTipSureBtn = ccui.Button:create()		mTipSureBtn:loadTextures("btn_green_1.png", "btn_green_1.png", "")		--mTipSureBtn:setScaleX(0.6)		--mTipSureBtn:setScaleY(0.8)		mTipSureBtn:setAnchorPoint(cc.p(0.5, 0.5))		mTipFrame:addChild(mTipSureBtn)	end	mTipSureBtn:addTouchEventListener(function(sender, eventType)		if ccui.TouchEventType.ended == eventType then			AutoUpdate_showTip(false)			if 1 == tipType then				cc.UserDefault:getInstance():setBoolForKey("auto_update_unfinished", true)				ResUpdate.startUpdate()			elseif 2 == tipType then				AutoUpdate_excute()			elseif 3 == tipType then				AutoUpdate_excute()			elseif 4 == tipType then				ResUpdate.checkUpdate()			elseif 5 == tipType then				ResUpdate.startUpdate()			end		end	end)	-- 提示确认文字图片	if nil == mTipSureImg then		mTipSureImg = ccui.ImageView:create("text_update.png")		mTipSureImg:setAnchorPoint(cc.p(0.5, 0.5))		mTipSureBtn:addChild(mTipSureImg)	end	-- 排列按钮位置	mTipCancelBtn:setVisible(false)	mTipSureBtn:setVisible(false)	--mTipCancelImg:setVisible(false)	--mTipSureImg:setVisible(false)	if 1 == tipType then			-- 提示是否要下载,取消/确认按钮		mTipCancelBtn:setVisible(true)		mTipSureBtn:setVisible(true)		mTipCancelBtn:setPosition(cc.p(123.64, 65.73))		mTipSureBtn:setPosition(cc.p(293.85, 65.73))		mTipSureImg:setPosition(cc.p(82.35, 34.30))		mTipCancelImg:setPosition(cc.p(82.35, 34.30))		mTipSureImg:setVisible(true)		mTipCancelImg:setVisible(true)	elseif 2 == tipType then		-- 提示下载过程中出错,重下按钮		mTipSureBtn:setVisible(true)		mTipSureBtn:setPosition(cc.p(TIP_SIZE.width/2, 65.73))		mTipSureImg:setVisible(true)		mTipSureImg:setPosition(cc.p(82.35, 34.30))	elseif 3 == tipType then		-- 提示必须检测版本,确认按钮		mTipSureBtn:setPosition(cc.p(TIP_SIZE.width/2, 65.73))		mTipSureBtn:setVisible(true)		mTipSureImg:setVisible(true)		mTipSureImg:setPosition(cc.p(82.35, 34.30))	elseif 4 == tipType then		-- 提示必须检测更新列表,确认按钮		mTipSureBtn:setPosition(cc.p(TIP_SIZE.width/2, 65.73))		mTipSureBtn:setVisible(true)		mTipSureImg:setVisible(true)		mTipSureImg:setPosition(cc.p(82.35, 34.30))	elseif 5 == tipType then		-- 提示必须下载,确认按钮		mTipSureBtn:setPosition(cc.p(TIP_SIZE.width/2, 65.73))		mTipSureBtn:setVisible(true)		mTipSureImg:setVisible(true)		mTipSureImg:setPosition(cc.p(82.35, 34.30))	endend----------------------------------------------------------------------