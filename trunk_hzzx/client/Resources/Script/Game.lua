------------------------------------------------------------------------ Author: jaron.ho-- Date: 2014-12-4-- Brief: 游戏逻辑----------------------------------------------------------------------G = G or {}G.VISIBLE_SIZE = cc.Director:getInstance():getVisibleSize()		-- 可视大小G.WIN_SIZE = cc.Director:getInstance():getWinSize()				-- 窗口大小local FLAG_REQUIRE, FLAG_RUN = false, false						-- 标志位----------------------------------------------------------------------Game = {	-- 节点层次关系:NODE_ROOT = {NODE_UI_BACK -> NODE_SCENE -> NODE_UI_FIXED -> NODE_UI_FRONT}	NODE_ROOT = cc.Layer:create(),			-- 根节点	NODE_UI_BACK = cc.Layer:create(),		-- 底层UI节点	NODE_SCENE = cc.Layer:create(),			-- 场景节点	NODE_UI_FIXED = cc.Layer:create(),		-- 固定UI节点	NODE_UI_FRONT = cc.Layer:create(),		-- 顶层UI节点	NODE_TOP = cc.Layer:create(),			-- 最顶层节点	mScheduleId = nil,						-- 每帧调度入口标识}------------------------------------------------------------------------ 初始化function Game:init()	self.NODE_ROOT:addChild(self.NODE_UI_BACK, 1001)	self.NODE_ROOT:addChild(self.NODE_SCENE, 1002)	self.NODE_ROOT:addChild(self.NODE_UI_FIXED, 1003)	self.NODE_ROOT:addChild(self.NODE_UI_FRONT, 1004)	self.NODE_ROOT:addChild(self.NODE_TOP, 1005)	cc.Director:getInstance():getRunningScene():addChild(self.NODE_ROOT)	-- 预显示界面	local backgroundSprite = cc.Sprite:create("background_01.jpg")	backgroundSprite:setAnchorPoint(cc.p(0.5, 0.5))	backgroundSprite:setPosition(cc.p(G.VISIBLE_SIZE.width/2, G.VISIBLE_SIZE.height/2))	self.NODE_UI_BACK:addChild(backgroundSprite)	local tipSprite = cc.Sprite:create("text_jiazai.png")	tipSprite:setPosition(cc.p(G.VISIBLE_SIZE.width/2, 114))	self.NODE_UI_BACK:addChild(tipSprite)	-- windows平台,开启命令模块	if cc.PLATFORM_OS_WINDOWS == G.PLATORM then		require("Command"):init(self.NODE_TOP)	end	-- 执行逻辑	self.NODE_ROOT:runAction(cc.Sequence:create(cc.DelayTime:create(0.1), cc.CallFunc:create(function()		if self.mScheduleId then			cc.Director:getInstance():getScheduler():unscheduleScriptEntry(self.mScheduleId)			self.mScheduleId = nil		end		self.mScheduleId = cc.Director:getInstance():getScheduler():scheduleScriptFunc(function(dt) self:update(dt) end, 0, false)		require("Require")		FLAG_REQUIRE = true	end)))	ChannelProxy:recordCustom("stat_game_logo_loading")end------------------------------------------------------------------------ 运行脚本逻辑function Game:run()	DataMap:init()							-- 初始玩家数据	AudioMgr:init()							-- 初始化音频管理器	PowerManger:init()						-- 初始化体力数据	FreePowerManger:init()					-- 两小时内不耗费体力初始化	ItemModel:init()						-- 初始化物品数据(毛球,饼干,钥匙,砖石)	GetRewardModel:init()					-- 初始化抽奖数据	DataLevelInfo:initMustShowHeroInfo()	-- 初始化英雄必抽的信息	DataHeroInfo:init()						-- 初始化英雄数据	ChannelPayCode:initGlobalCode()			-- 根据渠道id，初始化相应的支付码	--UIManager:openFixed(UIDiscountDiamond)		-- 打开中间界面	--UIManager:openFixed(UISetUp)		DataMap:setPass(DataMap:getMaxPass())	UIManager:openBack(UIMain)				-- 打开主界面	ChannelProxy:recordCustom("stat_enter_main")	UIManager:openFixed(UIMiddlePub)		-- 打开中间界面	DataLevelInfo:showActivityBtn()	UIManager:openFixed(UIDiscountDiamond)		-- 打开中间界面	-- if DataMap:getCompleteCG() == false then		-- UIManager:openFront(UICG, true, nil, false, false)		-- 四格漫画	-- end	if GuideUI:checkUIGuide(UIMiddlePub) then		UIMain:setScorllViewTouch(false)	endend------------------------------------------------------------------------ 每帧更新function Game:update(dt)	-- 定时器更新调度	UpdateTimer()	-- 界面更新调度	UIManager:update(dt)	-- 数据表加载调度	LogicTable:updateLoad(function()		self:run()		FLAG_RUN = true	end)end------------------------------------------------------------------------ 程序进入后台调用function applicationDidEnterBackground()	cclog("applicationDidEnterBackground")	if not FLAG_REQUIRE or not FLAG_RUN then return end	DataMap:saveDataBase()	AudioMgr:pause()end------------------------------------------------------------------------ 程序进入前台调用function applicationWillEnterForeground()	cclog("applicationWillEnterForeground")	if not FLAG_REQUIRE or not FLAG_RUN then return end	DataMap:saveDataBase()	AudioMgr:resume()end----------------------------------------------------------------------